{"ast":null,"code":"var _jsxFileName = \"E:\\\\VSCodeProjects\\\\ReactCalculatorApp\\\\calculator-app\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst operands = ['*', '/', '+', '-'];\nconst isOperand = value => {\n  for (let i = 0; i < operands.length; i++) {\n    if (value === operands[i]) {\n      return true;\n    }\n  }\n  return false;\n};\nconst NumberButton = () => {};\n_c = NumberButton;\nconst ClearButton = props => {\n  const handleClick = () => {\n    props.setCalculatedAnswer(\"0\");\n    props.setExpression(\"0\");\n    props.setNextElement(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"clear button\",\n    id: props.id,\n    onClick: handleClick,\n    type: \"button\",\n    children: \"AC\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ClearButton;\nconst OperandButton = props => {\n  const handleClick = () => {\n    if (props.value === '-') {\n      //- is a special case due to possibility of making a negative number\n\n      if (!isOperand(props.nextElement)) {\n        //move numbers to the expression\n        if (props.nextElement === \"\") {\n          props.setExpression('');\n        } else {\n          props.setExpression(props.expression.concat(props.nextElement));\n        }\n        props.setNextElement(props.value);\n      } else if (props.nextElement != '-') {\n        //is an operand besides -\n        props.setNextElement(props.nextElement.concat(props.value));\n      }\n      return;\n    }\n    if (props.nextElement != \"\") {\n      //if next element is empty, don't start expression with operand\n      if (!isOperand(Array.from(props.nextElement)[0])) {\n        //move numbers to the expression\n        props.setExpression(props.expression.concat(props.nextElement));\n        props.setNextElement(props.value);\n      } else {\n        //not a number means current element is an operand and should be replaced\n        props.setNextElement(props.value);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"operand button\",\n    id: props.id,\n    onClick: handleClick,\n    type: \"button\",\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_c3 = OperandButton;\nconst EqualButton = props => {\n  const handleClick = () => {\n    if (!isOperand(Array.from(props.nextElement)[0])) {\n      //if a number is next element, append it to expression before eval\n      props.setExpression(props.expression.concat(props.nextElement));\n    }\n    //eval the expression\n    //be careful with eval. If expressions aren't 100% clean, it can lead to vulnerabilities\n    props.setCalculatedAnswer(eval(props.expression));\n    props.setExpression(\"\");\n    props.setNextElement(props.calculatedAnswer);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    id: props.id,\n    className: \"equal button\",\n    onClick: handleClick,\n    type: \"button\",\n    children: \"=\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_c4 = EqualButton;\nconst Display = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: props.id,\n    className: \"display\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expressionDisplay\",\n      children: [props.expression, props.nextElement]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculatedDisplay\",\n      children: props.calculatedAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_c5 = Display;\nconst App = () => {\n  _s();\n  const [expression, setExpression] = useState(\"0\");\n  const [nextElement, setNextElement] = useState(\"\");\n  const [calculatedAnswer, setCalculatedAnswer] = useState(\"0\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      id: \"display\",\n      expression: expression,\n      nextElement: nextElement,\n      calculatedAnswer: calculatedAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClearButton, {\n      id: \"clear\",\n      setExpression: setExpression,\n      setNextElement: setNextElement,\n      setCalculatedAnswer: setCalculatedAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperandButton, {\n      id: \"multiply\",\n      value: \"*\",\n      setNextElement: setNextElement,\n      nextElement: nextElement,\n      setExpression: setExpression,\n      expression: expression\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OperandButton, {\n      id: \"divide\",\n      value: \"/\",\n      setNextElement: setNextElement,\n      nextElement: nextElement,\n      setExpression: setExpression,\n      expression: expression\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"m0NFA8x0JYnlE73MYaR6Lo9k8mY=\");\n_c6 = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 113,\n  columnNumber: 3\n}, this));\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"NumberButton\");\n$RefreshReg$(_c2, \"ClearButton\");\n$RefreshReg$(_c3, \"OperandButton\");\n$RefreshReg$(_c4, \"EqualButton\");\n$RefreshReg$(_c5, \"Display\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","jsxDEV","_jsxDEV","operands","isOperand","value","i","length","NumberButton","_c","ClearButton","props","handleClick","setCalculatedAnswer","setExpression","setNextElement","className","id","onClick","type","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","OperandButton","nextElement","expression","concat","Array","from","_c3","EqualButton","eval","calculatedAnswer","_c4","Display","_c5","App","_s","_c6","root","createRoot","document","getElementById","render","$RefreshReg$"],"sources":["E:/VSCodeProjects/ReactCalculatorApp/calculator-app/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\n\nconst operands = ['*', '/', '+', '-'];\n\nconst isOperand = (value) => {\n  for(let i = 0; i < operands.length; i++){\n    if(value === operands[i]){\n      return true;\n    }\n  }\n  return false;\n}\n\nconst NumberButton = () => {\n\n}\n\nconst ClearButton = (props) => {\n\n  const handleClick = () => {\n    props.setCalculatedAnswer(\"0\");\n    props.setExpression(\"0\");\n    props.setNextElement(\"\");\n  }\n\n  return (\n    <button className='clear button' id={props.id} onClick={handleClick} type='button'>AC</button>\n  )\n}\n\nconst OperandButton = (props) => {\n\n  const handleClick = () => {\n\n    if(props.value === '-'){ //- is a special case due to possibility of making a negative number\n\n      if (!isOperand(props.nextElement)){//move numbers to the expression\n        if(props.nextElement === \"\"){\n          props.setExpression('');\n        } else {\n          props.setExpression(props.expression.concat(props.nextElement));\n        }\n        props.setNextElement(props.value);\n      } else if (props.nextElement != '-'){ //is an operand besides -\n        props.setNextElement(props.nextElement.concat(props.value));\n      }\n      return;\n    }\n\n    if(props.nextElement != \"\"){ //if next element is empty, don't start expression with operand\n      if(!isOperand(Array.from(props.nextElement)[0])){//move numbers to the expression\n        props.setExpression(props.expression.concat(props.nextElement));\n        props.setNextElement(props.value);\n      } else{ //not a number means current element is an operand and should be replaced\n        props.setNextElement(props.value);\n      }\n    }\n  }\n\n  return(\n    <button className='operand button' id={props.id} onClick={handleClick} type='button'>{props.value}</button>\n  )\n}\n\nconst EqualButton = (props) => {\n  const handleClick = () => {\n    if(!isOperand(Array.from(props.nextElement)[0])){ //if a number is next element, append it to expression before eval\n      props.setExpression(props.expression.concat(props.nextElement));\n    }\n    //eval the expression\n    //be careful with eval. If expressions aren't 100% clean, it can lead to vulnerabilities\n    props.setCalculatedAnswer(eval(props.expression));\n    props.setExpression(\"\");\n    props.setNextElement(props.calculatedAnswer);\n  }\n\n  return (\n    <button id={props.id} className='equal button' onClick={handleClick} type='button'>=</button>\n  )\n}\n\nconst Display = (props) => {\n  return (\n    <div id={props.id} className='display'>\n      <div className='expressionDisplay'>\n        {props.expression}{props.nextElement}\n      </div>\n      <div className='calculatedDisplay'>\n        {props.calculatedAnswer}\n      </div>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [expression, setExpression] = useState(\"0\");\n  const [nextElement, setNextElement] = useState(\"\");\n  const [calculatedAnswer, setCalculatedAnswer] = useState(\"0\");\n\n  return(\n    <div id='calculator'>\n      <Display id='display' expression={expression} nextElement={nextElement} calculatedAnswer={calculatedAnswer}/>\n      <ClearButton id='clear' setExpression={setExpression} setNextElement={setNextElement} setCalculatedAnswer={setCalculatedAnswer}/>\n      <OperandButton id='multiply' value='*' setNextElement={setNextElement} nextElement={nextElement} setExpression={setExpression} expression={expression}/>\n      <OperandButton id='divide' value='/' setNextElement={setNextElement} nextElement={nextElement} setExpression={setExpression} expression={expression}/>\n    </div>\n  )\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <App />\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}